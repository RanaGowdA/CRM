// <auto-generated />
using System;
using CustomerRelationshipManagement.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerRelationshipManagement.Server.Migrations
{
    [DbContext(typeof(CRMDbContext))]
    [Migration("20230705194835_intialcreate")]
    partial class intialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.19");

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Lead", b =>
                {
                    b.Property<int>("LeadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForecastedValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForecastedValueCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpportunity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeadSource")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeadStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Offering")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalesTypeNature")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceLines")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LeadId");

                    b.HasIndex("ClientAccountId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeneralDeatilsId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeneralDeatilsId");

                    b.ToTable("ClientAccounts");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Implementation.GeneralDeatils", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Geo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PostalCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GeneralDeatils");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Interfaces.EngagementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientAccountId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId")
                        .IsUnique();

                    b.HasIndex("ClientAccountId1");

                    b.ToTable("EngagementModels");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Interfaces.TemplateConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CityOntology")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientAccountId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameOntology")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionOntology")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SegmentOntology")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId")
                        .IsUnique();

                    b.HasIndex("ClientAccountId1");

                    b.ToTable("TemplateConfigurations");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("LastEditedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visiblity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("InpState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastEditedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visiblity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Lead", b =>
                {
                    b.HasOne("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", null)
                        .WithMany("Leads")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerRelationshipManagement.Shared.Opportunity", "Opportunity")
                        .WithOne()
                        .HasForeignKey("CustomerRelationshipManagement.Shared.Lead", "LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerRelationshipManagement.Shared.Project", "Project")
                        .WithOne()
                        .HasForeignKey("CustomerRelationshipManagement.Shared.Lead", "LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", b =>
                {
                    b.HasOne("CustomerRelationshipManagement.Shared.Models.Implementation.GeneralDeatils", "GeneralDeatils")
                        .WithMany()
                        .HasForeignKey("GeneralDeatilsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralDeatils");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Interfaces.EngagementModel", b =>
                {
                    b.HasOne("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", null)
                        .WithOne("EngagementModel")
                        .HasForeignKey("CustomerRelationshipManagement.Shared.Models.Interfaces.EngagementModel", "ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", "ClientAccount")
                        .WithMany()
                        .HasForeignKey("ClientAccountId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Interfaces.TemplateConfiguration", b =>
                {
                    b.HasOne("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", null)
                        .WithOne("Configuration")
                        .HasForeignKey("CustomerRelationshipManagement.Shared.Models.Interfaces.TemplateConfiguration", "ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", "ClientAccount")
                        .WithMany()
                        .HasForeignKey("ClientAccountId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");
                });

            modelBuilder.Entity("CustomerRelationshipManagement.Shared.Models.Implementation.ClientAccount", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("EngagementModel")
                        .IsRequired();

                    b.Navigation("Leads");
                });
#pragma warning restore 612, 618
        }
    }
}
